generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String?
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  transactions  Transaction[]
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?

  username        String?
  displayUsername String?

  @@unique([username])
  @@map("user")
}

model Session {
  id             String   @id @default(cuid())
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  products    Product[]
  createdAt   DateTime  @default(now()) @db.Timestamptz
  updatedAt   DateTime  @updatedAt @db.Timestamptz

  @@map("category")
}

model Brand {
  id        String    @id @default(uuid())
  name      String
  logoUrl   String?   @map("logo_url")
  products  Product[]
  createdAt DateTime  @default(now()) @db.Timestamptz
  updatedAt DateTime  @updatedAt @db.Timestamptz

  @@map("brand")
}

model Unit {
  id                  String            @id @default(uuid())
  name                String
  symbol              String
  fromUnitConversions UnitConversion[]  @relation("FromUnit")
  toUnitConversions   UnitConversion[]  @relation("ToUnit")
  products            Product[] // Updated relation
  stockIns            StockIn[]
  stockOuts           StockOut[]
  transactionItems    TransactionItem[]
  createdAt           DateTime          @default(now()) @db.Timestamptz
  updatedAt           DateTime          @updatedAt @db.Timestamptz

  @@map("unit")
}

model UnitConversion {
  id               String   @id @default(uuid())
  fromUnit         Unit     @relation("FromUnit", fields: [fromUnitId], references: [id])
  fromUnitId       String   @map("from_unit_id")
  toUnit           Unit     @relation("ToUnit", fields: [toUnitId], references: [id])
  toUnitId         String   @map("to_unit_id")
  conversionFactor Int      @map("conversion_factor")
  createdAt        DateTime @default(now()) @db.Timestamptz
  updatedAt        DateTime @updatedAt @db.Timestamptz

  @@map("unit_conversion")
}

model Product {
  id           String         @id @default(uuid())
  name         String
  category     Category       @relation(fields: [categoryId], references: [id])
  categoryId   String         @map("category_id")
  brand        Brand?         @relation(fields: [brandId], references: [id])
  brandId      String?        @map("brand_id")
  description  String?
  unit         Unit           @relation(fields: [unitId], references: [id])
  unitId       String         @map("unit_id")
  price        Int
  currentStock Int            @default(0) @map("current_stock")
  skuCode      String?        @map("sku_code")
  barcode      String?
  isActive     Boolean        @default(true) @map("is_active")
  images       ProductImage[]
  batches      ProductBatch[]
  discountRelationProduct DiscountRelationProduct[]
  createdAt    DateTime       @default(now()) @db.Timestamptz
  updatedAt    DateTime       @updatedAt @db.Timestamptz

  @@map("product")
}

model ProductBatch {
  id                String            @id @default(uuid())
  product           Product           @relation(fields: [productId], references: [id])
  productId         String            @map("product_id")
  batchCode         String            @map("batch_code")
  expiryDate        DateTime          @map("expiry_date") @db.Date
  initialQuantity   Int               @map("initial_quantity")
  remainingQuantity Int               @map("remaining_quantity")
  buyPrice          Int               @map("buy_price")
  stockIns          StockIn[]
  stockOuts         StockOut[]
  transactionItems  TransactionItem[]
  createdAt         DateTime          @default(now()) @db.Timestamptz
  updatedAt         DateTime          @updatedAt @db.Timestamptz

  @@map("product_batch")
}

model ProductImage {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @map("product_id")
  imageUrl  String   @map("image_url")
  isPrimary Boolean  @map("is_primary")
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  @@map("product_image")
}

// ==============================
// DISCOUNT MODELS
// ==============================

model Discount {
  id               String            @id @default(uuid())
  name             String
  discountType     String            @map("discount_type")   
  valueType        String            @map("value_type")
  value            Int               @map("value")
  minPurchase      Int?              @map("min_purchase")
  startDate        DateTime          @map("start_date") @db.Timestamptz
  endDate          DateTime          @map("end_date") @db.Timestamptz
  isActive         Boolean           @default(true) @map("is_active")
  createdAt        DateTime          @default(now()) @db.Timestamptz
  updatedAt        DateTime          @updatedAt @db.Timestamptz
  discountRelations DiscountRelation[]
  discountProducts   DiscountRelationProduct[]
  discountMembers   DiscountRelationMember[]
  @@map("discount")
}

model DiscountRelation {
  discountId   String   @map("discount_id")
  relationId   String   @map("relation_id")
  discount    Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)
  @@id([discountId])
  @@map("discount_relation")
  @@unique([discountId])
}

model DiscountRelationProduct{
  discountId String @map("discount_id")
  productId String @map("product_id")
discount  Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id],onDelete: Cascade)
  @@map("discount_relation_product")
  @@id([discountId, productId])
}
model DiscountRelationMember{
  discountId String @map("discount_id")
  memberId String @map("product_id")
  discount  Discount @relation(fields: [discountId], references: [id],onDelete: Cascade)
  member Member @relation(fields: [memberId], references: [id],onDelete: Cascade)
  @@map("discount_relation_member")
  @@id([discountId, memberId])
}


model MemberTier {
  id         String   @id @default(uuid())
  name       String
  minPoints  Int      @map("min_points")
  multiplier Float    @default(1.0) @map("multiplier")
  members    Member[]
  createdAt  DateTime @default(now()) @db.Timestamptz
  updatedAt  DateTime @updatedAt @db.Timestamptz

  @@map("member_tier")
}

model Member {
  id                String        @id @default(uuid())
  name              String
  email             String?
  phone             String?
  tier              MemberTier?   @relation(fields: [tierId], references: [id])
  tierId            String?       @map("tier_id")
  totalPoints       Int           @default(0) @map("total_points")
  totalPointsEarned Int           @default(0) @map("total_points_earned")
  joinDate          DateTime      @map("join_date") @db.Timestamptz
  memberPoints      MemberPoint[]
  rewardClaims      RewardClaim[]
  transactions      Transaction[]
  discountRelationsMember DiscountRelationMember[]
  createdAt         DateTime      @default(now()) @db.Timestamptz
  updatedAt         DateTime      @updatedAt @db.Timestamptz

  @@map("member")
}

model MemberPoint {
  id            String      @id @default(uuid())
  member        Member      @relation(fields: [memberId], references: [id])
  memberId      String      @map("member_id")
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @map("transaction_id")
  pointsEarned  Int         @map("points_earned")
  dateEarned    DateTime    @map("date_earned") @db.Timestamptz
  notes         String?
  createdAt     DateTime    @default(now()) @db.Timestamptz
  updatedAt     DateTime    @updatedAt @db.Timestamptz

  @@map("member_point")
}

model Reward {
  id           String        @id @default(uuid())
  name         String
  pointsCost   Int           @map("points_cost")
  stock        Int
  isActive     Boolean       @default(true) @map("is_active")
  expiryDate   DateTime?     @map("expiry_date") @db.Timestamptz
  imageUrl     String?       @map("image_url")
  description  String?
  rewardClaims RewardClaim[]
  createdAt    DateTime      @default(now()) @db.Timestamptz
  updatedAt    DateTime      @updatedAt @db.Timestamptz

  @@map("reward")
}

model RewardClaim {
  id        String   @id @default(uuid())
  member    Member   @relation(fields: [memberId], references: [id])
  memberId  String   @map("member_id")
  reward    Reward   @relation(fields: [rewardId], references: [id])
  rewardId  String   @map("reward_id")
  claimDate DateTime @map("claim_date") @db.Timestamptz
  status    String
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  @@map("reward_claim")
}

// ==============================
// INVENTORY TRANSACTIONS
// ==============================

model Supplier {
  id        String    @id @default(uuid())
  name      String
  contact   String?
  stockIns  StockIn[]
  createdAt DateTime  @default(now()) @db.Timestamptz
  updatedAt DateTime  @updatedAt @db.Timestamptz

  @@map("supplier")
}

model StockIn {
  id         String       @id @default(uuid())
  batch      ProductBatch @relation(fields: [batchId], references: [id])
  batchId    String       @map("batch_id")
  quantity   Int
  unit       Unit         @relation(fields: [unitId], references: [id])
  unitId     String       @map("unit_id")
  date       DateTime     @db.Timestamptz
  supplier   Supplier?    @relation(fields: [supplierId], references: [id])
  supplierId String?      @map("supplier_id")
  createdAt  DateTime     @default(now()) @db.Timestamptz
  updatedAt  DateTime     @updatedAt @db.Timestamptz

  @@map("stock_in")
}

model StockOut {
  id        String       @id @default(uuid())
  batch     ProductBatch @relation(fields: [batchId], references: [id])
  batchId   String       @map("batch_id")
  quantity  Int
  unit      Unit         @relation(fields: [unitId], references: [id])
  unitId    String       @map("unit_id")
  date      DateTime     @db.Timestamptz
  reason    String
  createdAt DateTime     @default(now()) @db.Timestamptz
  updatedAt DateTime     @updatedAt @db.Timestamptz

  @@map("stock_out")
}

// ==============================
// SALES & FINANCIAL MODELS
// ==============================

model Transaction {
  id             String            @id @default(uuid())
  cashier        User              @relation(fields: [cashierId], references: [id])
  cashierId      String            @map("cashier_id")
  member         Member?           @relation(fields: [memberId], references: [id])
  memberId       String?           @map("member_id")
  totalAmount    Int               @map("total_amount")
  finalAmount    Int               @map("final_amount")
  paymentMethod  String            @map("payment_method")
  discountMemberId String?         @map("discount_member_id")
  discountValueType String?        @map("discount_value_type")
  discountValue Int?               @map("discount_value")
  discountAmount Int?               @map("discount_amount")
  items          TransactionItem[]
  memberPoints   MemberPoint[]
  createdAt      DateTime          @default(now()) @db.Timestamptz
  updatedAt      DateTime          @updatedAt @db.Timestamptz

  @@map("transaction")
}

model TransactionItem {
  id            String       @id @default(uuid())
  transaction   Transaction  @relation(fields: [transactionId], references: [id])
  transactionId String       @map("transaction_id")
  batch         ProductBatch @relation(fields: [batchId], references: [id])
  batchId       String       @map("batch_id")
  quantity      Int
  unit          Unit         @relation(fields: [unitId], references: [id])
  unitId        String       @map("unit_id")
  pricePerUnit  Int          @map("price_per_unit")
  discountId    String?      @map("discount_id")
  discountValueType String?  @map("discount_value_type")
  discountValue Int?         @map("discount_value")
  discountAmount Int?        @map("discount_amount")
  subtotal      Int
  createdAt     DateTime     @default(now()) @db.Timestamptz
  updatedAt     DateTime     @updatedAt @db.Timestamptz

  @@map("transaction_item")
}

model FinancialReport {
  id           String         @id @default(uuid())
  period       String
  totalRevenue Int            @map("total_revenue")
  totalProfit  Int            @map("total_profit")
  createdAt    DateTime       @default(now()) @db.Timestamptz
  updatedAt    DateTime       @updatedAt @db.Timestamptz
  details      ReportDetail[]

  @@map("financial_report")
}

model ReportDetail {
  id          String          @id @default(uuid())
  report      FinancialReport @relation(fields: [reportId], references: [id])
  reportId    String          @map("report_id")
  type        String
  amount      Int
  description String
  date        DateTime        @db.Date
  createdAt   DateTime        @default(now()) @db.Timestamptz
  updatedAt   DateTime        @updatedAt @db.Timestamptz

  @@map("report_detail")
}

model Expense {
  id          String   @id @default(uuid())
  amount      Int
  category    String
  description String
  date        DateTime @db.Date
  createdAt   DateTime @default(now()) @db.Timestamptz
  updatedAt   DateTime @updatedAt @db.Timestamptz

  @@map("expense")
}

// ==============================
// SETTINGS MODELS
// ==============================
model Setting {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String?
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  @@map("setting")
}
